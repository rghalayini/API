@page "/customers"
@using _8Blazor.Models
@inject HttpClient http


<div class="container">
    <div class="text-right">
        <button type="submit" class="btn btn-danger" @onclick="DeleteAllCustomers">Delete all customers</button>
    </div>

    <EditForm class="my-5" Model="@customer" OnSubmit="@CreateCustomers">
        <h5 class="mb-3">Create a customer</h5>
        <div class="form-group">
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" placeholder="FirstName..." @bind="customer.FirstName" />
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="LastName..." @bind="customer.LastName" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <input type="text" class="form-control" placeholder="Email..." @bind="customer.Email" />
        </div>
        <button type="submit" class="btn btn-success">Create customer</button>
    </EditForm>

    <table class="table">
        <thead class="thead-light">
            <tr>
                <th scope="col">#</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col" colspan="2">Email</th>
            </tr>
        </thead>
        @if (customers != null)
        {
            <tbody>
                @foreach (var customer in customers)
                {
                    <tr>
                        <th scope="row">@customer.Id</th>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.Email</td>
                        <td class="text-center">
                            <span style="cursor: pointer" class="oi oi-trash" @onclick="() =>DeleteCustomers(customer.Id)"></span>
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>

@code {
    private List<CustomerModel> customers;
    private CustomerCreateModel customer;

    private async Task GetCustomers()
    {
        customers = await http.GetFromJsonAsync<List<CustomerModel>>("http://localhost:53214/api/customers/");
        StateHasChanged();
    }

    private async Task CreateCustomers()
    {
        await http.PostAsJsonAsync<CustomerCreateModel>("http://localhost:53214/api/customers/", customer);

        customer = new CustomerCreateModel();
        await GetCustomers();
    }
    private async Task DeleteAllCustomers()
    {
        await http.DeleteAsync("http://localhost:53214/api/customers/all");
        await GetCustomers();
    }
    private async Task DeleteCustomers(int id)
    {
        await http.DeleteAsync($"http://localhost:53214/api/customers/{id}");
        await GetCustomers();
    }

    protected override async Task OnInitializedAsync()
    {
        customer = new CustomerCreateModel();
        await GetCustomers();
    }
}

@* FOr a review of the methods that need to be substituted with after the Blazor update, check this link https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-preview-4-release-now-available/ *@